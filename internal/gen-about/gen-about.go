//go:generate go run gen-about.go

package main

import (
	"fmt"
	"log"
	"os"
	"os/exec"
	"strings"
	"time"
)

const (
	AboutGo  = "../../about.go"
	ProgName = "spin"
	Package  = "spin"
)

func main() {
	out, err := os.Create(AboutGo)
	if err != nil {
		log.Fatal(err)
	}
	defer out.Close()

	cmd := exec.Command("git", "rev-parse", "--short", "HEAD")
	o, err := cmd.CombinedOutput()
	if err != nil {
		log.Fatal(string(o))
	}
	hash := strings.TrimSpace(string(o))

	version := "<no tag>"
	// cmd = exec.Command("git", "describe", "--tag", "--abbrev=0")
	// o, err = cmd.CombinedOutput()
	// if err != nil {
	// 	log.Print(string(o))
	// } else {
	// 	version = strings.TrimSpace(string(o))
	// }
	buildDate := time.Now().Format("2 Jan 2006")

	fmt.Fprintf(out, "// Code generated by 'gen-about'; DO NOT EDIT.\n\n")
	fmt.Fprintf(out, "package %v\n\n", Package)
	fmt.Fprintf(out, "const (\n")
	fmt.Fprintf(out, "\tProgName = \"%v\"\n", ProgName)
	fmt.Fprintf(out, "\tVersion = \"%v\"\n", version)
	fmt.Fprintf(out, "\tBuildDate = \"%v\"\n", buildDate)
	fmt.Fprintf(out, "\tCommit = \"%v\"\n", hash)
	fmt.Fprintf(out, ")")
}
